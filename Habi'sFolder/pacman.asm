org 100h
; Pacman Game in x86 Assembly for DOS
; This code creates a maze for the game using ASCII characters

[bits 16]           ; Use 16-bit code
[org 0x100]         ; Origin point for the program

%define SCREEN_WIDTH 320
%define SCREEN_HEIGHT 200

%define SPRITEW 8
%define SPRITEH 8

%define MAZERLIMIT 151
%define MAZEBLIMIT 32

section .data

; ---------------------------------------------------------------------------
; Pacman sprites

pacman_right_1  db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00 
                db 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x0e, 0x0e, 0x00
                db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
                db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00, 0x00
                db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00
                db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00 
                db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

pacman_down_1 db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
              db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
              db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
              db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
              db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00, 0x00
              db 0x00, 0x0e, 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
              db 0x00, 0x0e, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00
              db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			  
pacman_up_1 db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            db 0x00, 0x0e, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00
            db 0x00, 0x0e, 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
            db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00, 0x00
            db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
            db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
            db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
            db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


pacman_left_1 db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
               db 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x0e, 0x0e, 0x00 
               db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
               db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
               db 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
               db 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
               db 0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00
               db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

; ---------------------------------------------------------------------------

Walls:
    db 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x00

Dots:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x59, 0x59, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x59, 0x59, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

Gates:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x00
    db 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56
    db 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56
    db 0x00, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

PowerPellet:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x59, 0x59, 0x59, 0x59, 0x00, 0x00
    db 0x00, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x00
    db 0x00, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x00
    db 0x00, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x00
    db 0x00, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x00
    db 0x00, 0x00, 0x59, 0x59, 0x59, 0x59, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


;wall sprite
WallVertical_Sprite:
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00

WallHorizontal_Sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

;Border Corner sprite
BorderUpRight_Sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x37
    db 0x00, 0x00, 0x00, 0x00, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37
    db 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x37, 0x00

BorderUpLeft_Sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x37, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00
    db 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00
    
BorderDownRight_Sprite:
    db 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37
    db 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x37
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

BorderDownLeft_Sprite:
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00
    db 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x00, 0x00, 0x00, 0x00
    db 0x37, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

;InsideWallCorner sprite
InsideWallCornerRight_Sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

InsideWallCornerLeft_Sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

InsideWallCornerUp_Sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00

InsideWallCornerDown_Sprite:
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

;Ghost Base Corner sprite

GhostBaseCornerUpRight_sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x37
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00

GhostBaseCornerUpLeft_sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x37, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00

GhostBaseCornerDownRight_sprite:
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x37
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

GhostBaseCornerDownLeft_sprite:
    db 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x37, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00
    db 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    
;Gate sprite

Gate_sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B
    db 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    
;Dot sprite

Dot_sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x37, 0x37, 0x37, 0x37, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

;Empty space sprite

Empty_sprite:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

; ---------------------------------------------------------------------------

xPos dw 0
xVelocity dw 1
yPos dw 80

yPosPac dw 200                 ; the starting y coordinate of the sprite
xPosPac dw 51360                   ; the starting x coordinate of the sprite
yVelocityPac dw 320            ; to go from one line to another
xVelocityPac dw 1              ; horizontal speed
direction db 'R'            ; Current direction (R, L, U, D)

pacman_x dd 40   ; Coordonnée x du centre du cercle Pac-Man
pacman_y dd	12   ; Coordonnée y du centre du cercle Pac-Man

currentPacmanSprite dd pacman_right_1 ; the current sprite to be displayed

spritew dw 8
spriteh dw 8

old_XPOS dw 0

old_YPOS dw 0

currentSprite dw 0

actualKeystroke dw 0

; ---------------------------------------------------------------------------

; ASCII representation of the maze
ASCII_Maze: 
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9
    db 9, 9, 9, 9, 9, 9, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 9, 9, 9, 9, 9
    db 9, 9, 9, 9, 9, 9, 1, 2, 1, 3, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 9, 9, 9, 9, 9  
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 2, 1, 9, 9, 9, 9, 9, 9, 9, 9
    db 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 1, 4, 4, 4, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 9, 9, 9, 9, 9
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 9, 9, 9, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 9, 9, 9, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 3, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 
    db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 

    Column dw 40
    Row dw 25
    PixelPerTileRow dw 2560

; ---------------------------------------------------------------------------
section .bss
keyPressed resb 1
keyReleased resb 1
collisionDetected resb 1 ; Variable pour indiquer si une collision est détectée
WALL_COLOR resb 1


section .text
start:
    mov ah, 00h
    mov al, 13h
    int 10h
    call clearScreen
    call Maze

    gameloop:
    mov al, 0FFh
    call draw_sprite

    ; display pacman
    mov si, [currentPacmanSprite]
    mov di, [xPosPac]
    call draw_pacman

    mov cx, 50000
    waitloop:
        loop waitloop
	
    ; ---------------------------------------------------------------------------

    call waitForKey
	
    ; check if key pressed WASD
    cmp al, 119 ; 'w' ASCII
    je up
    cmp al, 115 ; 's' ASCII
    je down
    cmp al, 100 ; 'd' ASCII 
    je right 
    cmp al, 97 ; 'a' ASCII
    je left

    ; check if key pressed zqsd
    cmp al, 122 ; 'z' ASCII
    je up
    cmp al, 115 ; 's' ASCII
    je down
    cmp al, 100 ; 'd' ASCII
    je right
    cmp al, 113 ; 'q' ASCII
    je left

    cmp al,0
    je releaseKey
    ; ---------------------------------------------------------------------------
    handleKey:
		mov byte [keyReleased], 0 ; Clear the key released flag
		; Handle key logic		
    cmp al, 119 ; 'w' ASCII
    je up
    cmp al, 115 ; 's' ASCII
    je down
    cmp al, 100 ; 'd' ASCII 
    je right
    cmp al, 97  ; 'a' ASCII
    je left

    ; check if key pressed zqsd
    cmp al, 122 ; 'z' ASCII
    je up
    cmp al, 115 ; 's' ASCII
    je down
    cmp al, 100 ; 'd' ASCII
    je right
    cmp al, 113 ; 'q' ASCII
    je left

    jmp gameloop

    releaseKey:
        mov byte [keyReleased], 1 ; Set the key released flag
        jmp gameloop

checkKeyPress:
    mov ah, 0x11 ; BIOS function to check keyboard status
        int 16h
        ; AL = scan code, AH = ASCII character
        mov [keyPressed], al
		ret
		

    .keyChanged:
    ret
	
    up:
        cmp byte [keyReleased], 1
        je .keyReleased
        call move_up
        .keyReleased:
        jmp gameloop

    down:
        cmp byte [keyReleased], 1
        je .keyReleased
        call move_down
        .keyReleased:
        jmp gameloop

    right:
        cmp byte [keyReleased], 1
        je .keyReleased
        call move_right
        .keyReleased:
        jmp gameloop

    left:
        cmp byte [keyReleased], 1
        je .keyReleased
        call move_left
        .keyReleased:
        jmp gameloop
    ; ---------------------------------------------------------------------------

    ; Exit the program if the escape key is pressed
    cmp al, 27                  ; ASCII value of escape key
    je clearScreen
    je quit                     ; go to the exit function if the comparison return an equal
    jmp gameloop                ; else return to the main loop
    ; ---------------------------------------------------------------------------

    draw_pacman:
        mov ax, 0xA000              ; memory location of the video mode
        mov es, ax
        mov dx, 8                   ; set the destination index to 8 (starting position in video memory)
    .eachLine:                  ; loop till each line of the sprite is printed
        mov cx, 8               ; setthe count register to 8 (number of pixel to copy per line)
        rep movsb               ; repeat the move byte action (copying pixel)
        add di, 320-8           ; move the destination index to the next line (320 pixel per line)
        dec dx                  ; decrement the loop counter (dx) and jump to .eachLine if not zero
        jnz .eachLine
        ret                     ; return to the main loop

    draw_sprite:
        mov si, [currentSprite]
        mov ax, [xPos]
        mov [old_XPOS], ax
        mov ax, [yPos]
        mov [old_YPOS], ax
        mov ax, 0A000h
        mov es, ax
        mov ax, [yPos]
        imul ax, 320
        add ax, [xPos] 
        mov di, ax
        mov cx, SPRITEH
    .draw_line:
        push cx
        mov cx, SPRITEW
        rep movsb
        pop cx
        add di, 320 - SPRITEW
        loop .draw_line
        ret
		
		

    ; ---------------------------------------------------------------------------
    move_right: 
        cmp byte [keyReleased], 1
		je .keyReleased

		; Check for collision with the wall
		call checkCollision
		cmp byte [collisionDetected], 1
		je .keyReleased ; If collision detected, don't move

		mov bx, [xVelocityPac]
		add bx, [xPosPac]
		mov [xPosPac], bx
		jmp right

.keyReleased:
    mov byte [keyReleased], 1
    jmp gameloop

    move_left:
        ; move the sprite to the left
        mov word [currentPacmanSprite], pacman_left_1 ; set the current sprite to the left facing sprite
        cmp word [xVelocityPac], 0                       ; check if the sprite is moving to the right
        jg .reverse                                   ; if it is, reverse the direction
        mov bx , [xVelocityPac]                          ; move the velocity to bx
        add bx, [xPosPac]                                ; add the velocity to the current position
        mov [xPosPac], bx                                ; move the new position to the current position
        jmp gameloop
        .reverse: 
            neg word [xVelocityPac]                      ; reverse the velocity
            jmp left                                  ; jump back to the left function

    move_up:
        ; Move the sprite upward
        mov word [currentPacmanSprite], pacman_up_1 ; select the sprite to be displayed
        cmp word [yVelocityPac], 0     ; check the value of velocity
        jg .reverse                 ; if the value is positive go to sub procedure .reverse
        mov bx, [xPosPac]              ; the position is increased by the speed of the sprite to go to the next line (here 320)
        add bx, [yVelocityPac]
        mov [xPosPac], bx              ; update the position and speed of the sprite
        jmp gameloop                ; return to the main loop
        .reverse:
            neg word [yVelocityPac]    ; negate the value of velocity to -320
            jmp up                  ; return to the procedure up

    move_down:
        ; Move the sprite downward
        mov word [currentPacmanSprite], pacman_down_1 ; select the sprite to be displayed
        cmp word [yVelocityPac], 0     ; check the value of velocity
        jl .reverse                 ; if the value is negative go to sub procedure .reverse
        mov bx, [xPosPac]              ; the position is increased by the speed of the sprite to go to the next line (here -320)
        add bx, [yVelocityPac]
        mov [xPosPac], bx              ; update the position and speed of the sprite 
        jmp gameloop                ; return to the main loop
        .reverse:
            neg word [yVelocityPac]    ; negate the value of velocity to +320
            jmp down                ; return to the procedure down
    ; ---------------------------------------------------------------------------

    drawWalls:
        mov dx, 8
        .eachLine:  
            mov cx, 8
            rep movsb
            add di, 320-8
            dec dx
            jnz .eachLine
            call nextColumn
        inc bx
        ret
    nextColumn:
        mov ax, [Column]
        dec ax
        mov [Column], ax
        cmp ax, 0
        je nextRow
        sub di, 2552
        ret

    nextRow:
        mov ax, [Row]
        dec ax
        mov [Row], ax
        cmp ax, 0
        je gameloop
        mov ax, 40
        mov [Column], ax
        mov ax, [PixelPerTileRow] 
        mov di, ax
        add ax, 2560
        mov [PixelPerTileRow], ax  
        ret
    Maze:
        mov di, 0
        mov bx, ASCII_Maze
        wallchoice:
            mov al, [bx]
            cmp al,  0   			
            je drawEmpty        
            cmp al, 1
            je drawWall
            cmp al, 2
            je DrawDot
            cmp al, 3
            je DrawPowerPellet
            cmp al, 4
            je DrawGates
			cmp al, 9
			je drawEmpty
			
	checkCollision:
		; Calculate the pixel position to check for collision
		mov ax, [xPosPac]
		add ax, SPRITEW ; Adjust based on Pacman's sprite width
		mov bx, [yPosPac]
		add bx, SPRITEH ; Adjust based on Pacman's sprite height
		call getPixelColor
		cmp al, WALL_COLOR ; Adjust WALL_COLOR to the color of your wall
		jne .noCollision

		; Collision detected
		mov byte [collisionDetected], 1
		ret

.noCollision:
    mov byte [collisionDetected], 0
    ret
	
	
	getPixelColor:
    mov ax, 0xA000 ; Video memory segment
    mov es, ax
    mov ax, bx ; Row
    imul ax, 320
    add ax, ax ; Multiply by 2 (assuming 16-color mode)
    add ax, di ; Column
    mov di, ax ; Destination index
    mov al, [es:di] ; Get the color of the pixel
    ret

       
          ; ===================================

          drawEmpty:
               mov si, Empty_sprite
               call drawWalls
               jmp wallchoice
          drawWall:
               mov si, Walls
               call drawWalls
               jmp wallchoice   
          DrawDot:
               mov si, Dots
               call drawWalls
               jmp wallchoice
          DrawGates:
             mov si, Gates
             call drawWalls
             jmp wallchoice
          DrawPowerPellet:
                mov si, PowerPellet
                call drawWalls
                jmp wallchoice

    waitForKey:
        mov ah, 0x00                 ; BIOS function to read keyboard input
        int 16h                      ; Call BIOS interrupt
        ret

    ;dos box default video mode
    mov ax, 03h                 ; set into video mode
    int 21h                     ; call DOS interupt
    int 20h                     ; quit

    quit:                       ; If escape key is pressed, jump to label 'exit'
        mov ah, 4ch                 ; DOS function to exit program
        int 21h                     ; Call DOS interrupt

    clearScreen:
        mov ax, 0xA000
        mov es, ax
        mov di, 0
        mov cx, 200*320
        rep stosb
        ret
